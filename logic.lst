Microsoft (R) Macro Assembler Version 6.14.8444		    03/27/15 10:23:45
logic.asm						     Page 1 - 1


				; #########################################################################
				;
				;   logic.asm - Assembly file for EECS205 Assignment 4/5
				;
				;
				; #########################################################################

				      .586
				      .MODEL FLAT,STDCALL
				      .STACK 4096
				      option casemap :none  ; case sensitive

				    include stars.inc	
			      C ; #########################################################################
			      C ;
			      C ;   stars.inc - Includes for EECS205 Assignment 1
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C DrawStarReg PROTO STDCALL ; Renders a star in the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate
			      C                         ;      edi = y-coordinate
			      C 
			      C DrawAllStars PROTO STDCALL ; Routine which uses DrawStarReg to create all the stars
			      C 
			      C EXTERNDEF STDCALL WinMain : NEAR
			      C 
				    include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
 00000010		      C _EECS205BITMAP STRUCT
 00000000  00000000	      C  dwWidth      DWORD  ?
 00000004  00000000	      C  dwHeight     DWORD  ?
 00000008  00		      C  bTransparent BYTE   ?
 00000009  00000003 [	      C               BYTE   3 DUP(?)
	    00
	   ]
 0000000C  00000000	      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
				    include rotate.inc	
			      C ; #########################################################################
			      C ;
			      C ;   rotate.inc - Includes for EECS205 Assignment 3
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C include blit.inc
			      C ; #########################################################################
			      C ;
			      C ;   blit.inc - Includes for EECS205 Assignment 2
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C 
			      C _EECS205BITMAP STRUCT
			      C  dwWidth      DWORD  ?
			      C  dwHeight     DWORD  ?
			      C  bTransparent BYTE   ?
			      C               BYTE   3 DUP(?)
			      C  lpBytes      DWORD  ?
			      C _EECS205BITMAP ENDS
			      C 
			      C EECS205BITMAP TYPEDEF _EECS205BITMAP
			      C 
			      C EXTERNDEF StarBitmap:EECS205BITMAP
			      C EXTERNDEF dwPitch:DWORD
			      C EXTERNDEF lpDisplayBits:DWORD
			      C 
			      C 
			      C BlitReg PROTO STDCALL   ; Renders a bitmap to the 2D drawing space
			      C                         ; Uses register passed parameters:
			      C                         ;      esi = x-coordinate (of image center)
			      C                         ;      edi = y-coordinate (of image center)
			      C 			;      edx = pointer to the bitmap to draw
			      C 
			      C 
			      C 
			      C 
			      C BasicBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD
			      C 
			      C RotateBlit PROTO STDCALL lpBmp:PTR EECS205BITMAP, xcenter:DWORD, ycenter:DWORD, angle:DWORD
			      C 
			      C 
			      C 
				    include game.inc
			      C ; #########################################################################
			      C ;
			      C ;   game.inc - Includes for EECS205 Assignment 4/5
			      C ;
			      C ;
			      C ; #########################################################################
			      C 
			      C ;; These are library routines that you will call (but do NOT have to implement)
			      C BeginDraw PROTO
			      C EndDraw PROTO
			      C 
			      C ;; You should not need to modify these prototypes (actually, it would probably be bad)
			      C GameInit PROTO
			      C GameMain PROTO mouseStatus:DWORD, keyDown:DWORD, keyUp:DWORD
			      C 
			      C ;; Useful Library Routines
			      C DrawString PROTO x:DWORD, y:DWORD, string:PTR BYTE 
			      C DrawInt PROTO x:DWORD, y:DWORD, value:DWORD
			      C 
			      C ;; Feel free to modify the following
			      C GameRender PROTO 
			      C GameLogic PROTO CurrentKey:DWORD ;;CurrentDirection:DWORD;;xinc:DWORD, yinc:DWORD
			      C Collision PROTO Sprite1:DWORD, Sprite2:DWORD 
 00000020		      C SPRITE STRUCT
 00000000  00000000	      C  LocX		  DWORD  ?
 00000004  00000000	      C  LocY		  DWORD  ?
 00000008  00000000	      C  Visible      DWORD  ?
 0000000C  00000000	      C  BitmapPTR    DWORD  ?	
 00000010  00000000	      C  BMType       DWORD  ?
 00000014  00000000	      C  Health	      DWORD  ?
 00000018  00000000	      C  Other	      DWORD  ?
 0000001C  00000000	      C  Radius		  DWORD  ?
			      C SPRITE ENDS
			      C 
			      C EXTERNDEF Sprites : DWORD
			      C EXTERNDEF expl: DWORD
			      C EXTERNDEF NumSprites: DWORD
			      C 
			      C 
				    include keys.inc		
			      C ;;
			      C ;; keys.inc -- These are virtual key codes to
			      C ;; captuer any keystrokes you desire
			      C 
 = 00000008		      C VK_BACK                              equ 8h
 = 00000003		      C VK_CANCEL                            equ 3h
 = 00000014		      C VK_CAPITAL                           equ 14h
 = 0000000C		      C VK_CLEAR                             equ 0Ch
 = 00000011		      C VK_CONTROL                           equ 11h
 = 0000002E		      C VK_DELETE                            equ 2Eh
 = 00000028		      C VK_DOWN                              equ 28h
 = 00000023		      C VK_END                               equ 23h
 = 0000001B		      C VK_ESCAPE                            equ 1Bh
 = 0000002B		      C VK_EXECUTE                           equ 2Bh
 = 0000002F		      C VK_HELP                              equ 2Fh
 = 00000024		      C VK_HOME                              equ 24h
 = 0000002D		      C VK_INSERT                            equ 2Dh
 = 00000001		      C VK_LBUTTON                           equ 1h
 = 00000025		      C VK_LEFT                              equ 25h
 = 00000004		      C VK_MBUTTON                           equ 4h
 = 00000012		      C VK_MENU                              equ 12h
 = 00000022		      C VK_NEXT                              equ 22h
 = 00000013		      C VK_PAUSE                             equ 13h
 = 00000022		      C VK_PGDN                              equ 22h
 = 00000021		      C VK_PGUP                              equ 21h
 = 0000002A		      C VK_PRINT                             equ 2Ah
 = 00000021		      C VK_PRIOR                             equ 21h
 = 00000002		      C VK_RBUTTON                           equ 2h
 = 0000000D		      C VK_RETURN                            equ 0Dh
 = 00000027		      C VK_RIGHT                             equ 27h
 = 00000029		      C VK_SELECT                            equ 29h
 = 00000010		      C VK_SHIFT                             equ 10h
 = 0000002C		      C VK_SNAPSHOT                          equ 2Ch
 = 00000020		      C VK_SPACE                             equ 20h
 = 00000009		      C VK_TAB                               equ 9h
 = 00000026		      C VK_UP                                equ 26h
 = 00000060		      C VK_NUMPAD0                           equ 60h
 = 00000061		      C VK_NUMPAD1                           equ 61h
 = 00000062		      C VK_NUMPAD2                           equ 62h
 = 00000063		      C VK_NUMPAD3                           equ 63h
 = 00000064		      C VK_NUMPAD4                           equ 64h
 = 00000065		      C VK_NUMPAD5                           equ 65h
 = 00000066		      C VK_NUMPAD6                           equ 66h
 = 00000067		      C VK_NUMPAD7                           equ 67h
 = 00000068		      C VK_NUMPAD8                           equ 68h
 = 00000069		      C VK_NUMPAD9                           equ 69h
 = 0000006A		      C VK_MULTIPLY                          equ 6Ah
 = 0000006B		      C VK_ADD                               equ 6Bh
 = 0000006C		      C VK_SEPARATOR                         equ 6Ch
 = 0000006D		      C VK_SUBTRACT                          equ 6Dh
 = 0000006E		      C VK_DECIMAL                           equ 6Eh
 = 0000006F		      C VK_DIVIDE                            equ 6Fh
 = 00000070		      C VK_F1                                equ 70h
 = 00000071		      C VK_F2                                equ 71h
 = 00000072		      C VK_F3                                equ 72h
 = 00000073		      C VK_F4                                equ 73h
 = 00000074		      C VK_F5                                equ 74h
 = 00000075		      C VK_F6                                equ 75h
 = 00000076		      C VK_F7                                equ 76h
 = 00000077		      C VK_F8                                equ 77h
 = 00000078		      C VK_F9                                equ 78h
 = 00000079		      C VK_F10                               equ 79h
 = 0000007A		      C VK_F11                               equ 7Ah
 = 0000007B		      C VK_F12                               equ 7Bh
 = 0000007C		      C VK_F13                               equ 7Ch
 = 0000007D		      C VK_F14                               equ 7Dh
 = 0000007E		      C VK_F15                               equ 7Eh
 = 0000007F		      C VK_F16                               equ 7Fh
 = 00000080		      C VK_F17                               equ 80h
 = 00000081		      C VK_F18                               equ 81h
 = 00000082		      C VK_F19                               equ 82h
 = 00000083		      C VK_F20                               equ 83h
 = 00000084		      C VK_F21                               equ 84h
 = 00000085		      C VK_F22                               equ 85h
 = 00000086		      C VK_F23                               equ 86h
 = 00000087		      C VK_F24                               equ 87h
 = 00000090		      C VK_NUMLOCK                           equ 90h
 = 00000091		      C VK_SCROLL                            equ 91h
 = 000000A0		      C VK_LSHIFT                            equ 0A0h
 = 000000A1		      C VK_RSHIFT                            equ 0A1h
 = 000000A2		      C VK_LCONTROL                          equ 0A2h
 = 000000A3		      C VK_RCONTROL                          equ 0A3h
 = 000000A4		      C VK_LMENU                             equ 0A4h
 = 000000A5		      C VK_RMENU                             equ 0A5h
 = 000000F6		      C VK_ATTN                              equ 0F6h
 = 000000F7		      C VK_CRSEL                             equ 0F7h
 = 000000F8		      C VK_EXSEL                             equ 0F8h
 = 000000F9		      C VK_EREOF                             equ 0F9h
 = 000000FA		      C VK_PLAY                              equ 0FAh
 = 000000FB		      C VK_ZOOM                              equ 0FBh
 = 000000FC		      C VK_NONAME                            equ 0FCh
 = 000000FD		      C VK_PA1                               equ 0FDh
 = 000000FE		      C VK_OEM_CLEAR                         equ 0FEh
 = 00000030		      C VK_0						 equ 30h
 = 00000031		      C VK_1						 equ 31h
 = 00000032		      C VK_2						 equ 32h
 = 00000033		      C VK_3						 equ 33h
 = 00000034		      C VK_4						 equ 34h
 = 00000035		      C VK_5						 equ 35h
 = 00000036		      C VK_6						 equ 36h
 = 00000037		      C VK_7						 equ 37h
 = 00000038		      C VK_8						 equ 38h
 = 00000039		      C VK_9						 equ 39h
 = 00000041		      C VK_A						 equ 41h
 = 00000042		      C VK_B						 equ 42h
 = 00000043		      C VK_C						 equ 43h
 = 00000044		      C VK_D						 equ 44h
 = 00000045		      C VK_E						 equ 45h
 = 00000046		      C VK_F						 equ 46h
 = 00000047		      C VK_G						 equ 47h
 = 00000048		      C VK_H						 equ 48h
 = 00000049		      C VK_I						 equ 49h
 = 0000004A		      C VK_J						 equ 4Ah
 = 0000004B		      C VK_K						 equ 4Bh
 = 0000004C		      C VK_L						 equ 4Ch
 = 0000004D		      C VK_M						 equ 4Dh
 = 0000004E		      C VK_N						 equ 4Eh
 = 0000004F		      C VK_O						 equ 4Fh
 = 00000050		      C VK_P						 equ 50h
 = 00000051		      C VK_Q						 equ 51h
 = 00000052		      C VK_R						 equ 52h
 = 00000053		      C VK_S						 equ 53h
 = 00000054		      C VK_T						 equ 54h
 = 00000055		      C VK_U						 equ 55h
 = 00000056		      C VK_V						 equ 56h
 = 00000057		      C VK_W						 equ 57h
 = 00000058		      C VK_X						 equ 58h
 = 00000059		      C VK_Y						 equ 59h
 = 0000005A		      C VK_Z						 equ 5Ah
			      C 
					 
 00000000			.DATA
 00000000 73 68 6F 6F 74	shoot BYTE "shoot.wav",0
	   2E 77 61 76 00
 0000000A 65 78 70 6C 6F	explosion BYTE "explosion.wav",0
	   73 69 6F 6E 2E
	   77 61 76 00
 00000018 67 61 6D 65 6F	gameover BYTE "gameover.wav",0
	   76 65 72 2E 77
	   61 76 00
 00000000			.CODE

				;;sound
				EXTERNDEF STDCALL PlaySoundA : NEAR
				  PlaySoundA PROTO STDCALL :DWORD,:DWORD,:DWORD
 = PlaySoundA			  PlaySound equ <PlaySoundA>
 = 00000001			  SND_ASYNC = 1h
 = 00000008			  SND_LOOP = 0008h
 = 00020000			 SND_FILENAME = 20000h
				;; Define the function GameLogic
				;; Since we have thoroughly covered defining functions in class, its up to you from here on out...
 00000000			GameLogic PROC  CurrentKey


 00000003  83 7D 08 52		cmp CurrentKey,VK_R
 00000007  75 08		jne game
				INVOKE GameLogic,CurrentKey


 00000011			game:
 00000011  8B 1D 00000000 E	mov ebx, Sprites
 00000017  8B CB		mov ecx,ebx
 00000019  83 C1 20		add ecx,32
 0000001C  83 79 08 01		cmp (SPRITE PTR [ecx]).Visible,1
 00000020  0F 85 0000023F	jne done
 00000026  B8 00000000		mov eax, 0
 0000002B			SpriteLoop:
				;; player logic 
 0000002B  83 7B 10 01		cmp (SPRITE PTR [ebx]).BMType, 1
 0000002F  75 54		jne Asteroid
 00000031					RightArrow:
 00000031  83 7D 08 27				cmp CurrentKey,VK_RIGHT   
 00000035  75 15				jne LeftArrow 
 00000037  8B 0B				mov ecx, (SPRITE PTR [ebx]).LocX
 00000039  83 C1 0A				add ecx, 10
 0000003C  89 0B				mov (SPRITE PTR [ebx]).LocX, ecx
 0000003E  8B 15 00000000 E			mov edx, Sprites
 00000044  83 7A 08 00				cmp (SPRITE PTR [edx]).Visible, 0
 00000048  75 1D				jne leftedge
 0000004A  89 0A				mov (SPRITE PTR [edx]).LocX, ecx

 0000004C					LeftArrow:
 0000004C  83 7D 08 25				cmp CurrentKey,VK_LEFT    
 00000050  75 15				jne leftedge
 00000052  8B 0B				mov ecx, (SPRITE PTR [ebx]).LocX
 00000054  83 E9 0A				sub ecx, 10
 00000057  89 0B				mov (SPRITE PTR [ebx]).LocX, ecx
 00000059  8B 15 00000000 E			mov edx, Sprites
 0000005F  83 7A 08 00				cmp (SPRITE PTR [edx]).Visible, 0
 00000063  75 02				jne leftedge
 00000065  89 0A				mov (SPRITE PTR [edx]).LocX, ecx
						
				;;Player Edge Logic
 00000067					leftedge:
 00000067  83 3B 00				cmp (SPRITE PTR [ebx]).LocX,0
 0000006A  7F 0B				jg rightedge
 0000006C  C7 03 0000027F			mov (SPRITE PTR [ebx]).LocX,639
 00000072  E9 000001CC				jmp dun
 00000077					rightedge:
 00000077  81 3B 0000027F			cmp (SPRITE PTR [ebx]).LocX,639
 0000007D  7C 06				jl Asteroid
 0000007F  C7 03 00000000			mov (SPRITE PTR [ebx]).LocX,0
						

				;;Asteroid/invader logic

 00000085			Asteroid:
 00000085  83 7B 10 02		cmp (SPRITE PTR [ebx]).BMType,2
 00000089  75 49		jne Laser
 0000008B					MoveRight: ;;Health = 1
 0000008B  83 7B 14 01				cmp (SPRITE PTR [ebx]).Health, 1
 0000008F  75 07				jne MoveLeft
 00000091  8B 0B				mov ecx, (SPRITE PTR [ebx]).LocX
 00000093  03 4B 18				add ecx, (SPRITE PTR [ebx]).Other
 00000096  89 0B				mov (SPRITE PTR [ebx]).LocX, ecx

 00000098					MoveLeft: ;;Health = -1
 00000098  83 7B 14 FF				cmp (SPRITE PTR [ebx]).Health, -1
 0000009C  75 07				jne SwitchRight
 0000009E  8B 0B				mov ecx, (SPRITE PTR [ebx]).LocX
 000000A0  2B 4B 18				sub ecx, (SPRITE PTR [ebx]).Other
 000000A3  89 0B				mov (SPRITE PTR [ebx]).LocX, ecx

						;;DirectionChanges
 000000A5					SwitchRight:
 000000A5  81 3B 0000027F			cmp (SPRITE PTR [ebx]).LocX,639
 000000AB  7C 12				jl SwitchLeft
 000000AD  8B 4B 04				mov ecx, (SPRITE PTR [ebx]).LocY
 000000B0  83 C1 14				add ecx, 20
 000000B3  89 4B 04				mov (SPRITE PTR [ebx]).LocY, ecx

						;;increase speed
						;;cmp (SPRITE PTR [ebx]).Other,1
						;;je exa

						;;mov ecx,(SPRITE PTR [ebx]).Other
						;;inc ecx
						;;mov (SPRITE PTR [ebx]).Other, ecx
						;;exa:
 000000B6  C7 43 14				mov (SPRITE PTR [ebx]).Health,-1
	   FFFFFFFF
 000000BD  EB 15				jmp Laser

 000000BF					SwitchLeft:
 000000BF  83 3B 00				cmp (SPRITE PTR [ebx]).LocX,0
 000000C2  7F 10				jg Laser
 000000C4  8B 4B 04				mov ecx, (SPRITE PTR [ebx]).LocY
 000000C7  83 C1 14				add ecx, 20
 000000CA  89 4B 04				mov (SPRITE PTR [ebx]).LocY, ecx		
 000000CD  C7 43 14				mov (SPRITE PTR [ebx]).Health,1
	   00000001

 000000D4			Laser:
 000000D4  83 7B 10 03		cmp (SPRITE PTR [ebx]).BMType,3
 000000D8  75 47		jne nextspt
						;;Key Press
						;;laser made visible if space is pressed
 000000DA  83 7D 08 20				cmp CurrentKey,VK_SPACE
 000000DE  75 1E				jne movementlogic
 000000E0  83 7B 08 00				cmp (SPRITE PTR [ebx]).Visible,0 
 000000E4  75 18				jne movementlogic
						INVOKE PlaySound, OFFSET shoot, 0, SND_ASYNC+SND_FILENAME
 000000F7  C7 43 08				mov (SPRITE PTR [ebx]).Visible, 1
	   00000001
						
						;;if laser visible, then it moves up
 000000FE					movementlogic:
 000000FE  83 7B 08 01				cmp (SPRITE PTR [ebx]).Visible, 1
 00000102  75 1D				jne nextspt
 00000104  8B 4B 04				mov ecx,(SPRITE PTR [ebx]).LocY
 00000107  83 E9 04				sub ecx, 4
 0000010A  89 4B 04				mov (SPRITE PTR [ebx]).LocY, ecx

						;;when it reaches the top laser is made innvisible and moved to original location
 0000010D  83 7B 04 00				cmp (SPRITE PTR [ebx]).LocY,0
 00000111  7F 0E				jg nextspt
 00000113  C7 43 08				mov (SPRITE PTR [ebx]).Visible, 0
	   00000000
 0000011A  C7 43 04				mov (SPRITE PTR [ebx]).LocY,420
	   000001A4







				;;move on to next sprite 
 00000121			nextspt:
 00000121  83 C3 20		add ebx, 32
 00000124  40			inc eax
 00000125  3B 05 00000000 E	cmp eax, NumSprites
 0000012B  0F 8E FFFFFEFA	jle SpriteLoop


				;;HitDetecionloop
 00000131  8B 1D 00000000 E	mov ebx, Sprites
 00000137  BA 00000000		mov edx, 0
 0000013C  BE 00000000		mov esi, 0
 00000141  BF 00000000		mov edi, 0
 00000146			SpriteLoop2:
				INVOKE Collision, Sprites, ebx
 00000152  83 F8 01		cmp eax,1 ;; if a hit collision returns 1
 00000155  75 49		jne nextspt2 ;;if no collision move on
 00000157  83 7B 10 02		cmp (SPRITE PTR [ebx]).BMType, 2
 0000015B  75 43		jne nextspt2 ;; if collision is not with asteroid mov on
				;;make asteroid not visible 
				INVOKE PlaySound, OFFSET explosion, 0, SND_ASYNC+SND_FILENAME
 0000016E  C7 43 08		mov (SPRITE PTR [ebx]).Visible,0
	   00000000
 00000175  8B 7B 04		mov  edi,(SPRITE PTR [ebx]).LocY
 00000178  8B 33		mov  esi,(SPRITE PTR [ebx]).LocX
				;; esi,edi<-x,y location for explotion
				;;make laser not visible and move it to original location
 0000017A  8B 1D 00000000 E	mov ebx, Sprites
 00000180  C7 43 08		mov (SPRITE PTR [ebx]).Visible,0
	   00000000
 00000187  C7 43 04		mov (SPRITE PTR [ebx]).LocY,420
	   000001A4
				;;draw explosion at proper location
 0000018E  8B 1D 00000000 E	mov ebx, expl
 00000194  89 7B 04		mov  (SPRITE PTR [ebx]).LocY,edi
 00000197  89 33		mov (SPRITE PTR [ebx]).LocX, esi
 00000199  C7 43 08		mov (SPRITE PTR [ebx]).Visible,1
	   00000001

				;;mov on to next sprite
 000001A0			nextspt2:
 000001A0  83 C3 20		add ebx, 32
 000001A3  42			inc edx
 000001A4  3B 15 00000000 E	cmp edx, NumSprites
 000001AA  7E 9A		jle SpriteLoop2




				;;;;HitDetecionloop player
 000001AC  8B 1D 00000000 E	mov ebx, Sprites
 000001B2  8B CB		mov ecx,ebx
 000001B4  83 C1 20		add ecx,32
 000001B7  BA 00000000		mov edx, 0
 000001BC  BE 00000000		mov esi, 0
 000001C1  BF 00000000		mov edi, 0
 000001C6			SpriteLoop3:
				INVOKE Collision, ecx, ebx
 000001CD  83 F8 01		cmp eax,1 ;; if a hit collision returns 1
 000001D0  75 45		jne nextspt3 ;;if no collision move on
 000001D2  83 7B 10 02		cmp (SPRITE PTR [ebx]).BMType, 2
 000001D6  75 3F		jne nextspt3 ;; if collision is not with asteroid mov on
 000001D8  60			pushad
				INVOKE PlaySound, OFFSET explosion, 0, SND_ASYNC+SND_FILENAME
 000001EA  61			popad
				;;make asteroid not visible 
 000001EB  C7 43 08		mov (SPRITE PTR [ebx]).Visible,0
	   00000000
 000001F2  8B 7B 04		mov  edi,(SPRITE PTR [ebx]).LocY
 000001F5  8B 33		mov  esi,(SPRITE PTR [ebx]).LocX
				;; esi,edi<-x,y location for explotion
				;;make player not visible and move it to original location
 000001F7  C7 41 08		mov (SPRITE PTR [ecx]).Visible,0
	   00000000
 000001FE  C7 41 04		mov (SPRITE PTR [ecx]).LocY,420
	   000001A4
				;;draw explosion at proper location
 00000205  8B 1D 00000000 E	mov ebx, expl
 0000020B  89 7B 04		mov  (SPRITE PTR [ebx]).LocY,edi
 0000020E  89 33		mov (SPRITE PTR [ebx]).LocX, esi
 00000210  C7 43 08		mov (SPRITE PTR [ebx]).Visible,1
	   00000001
				;;mov on to next sprite
 00000217			nextspt3:
 00000217  83 C3 20		add ebx, 32
 0000021A  42			inc edx
 0000021B  3B 15 00000000 E	cmp edx, NumSprites
 00000221  7E A3		jle SpriteLoop3








				;;Explosion logic timing
 00000223  8B 1D 00000000 E	mov ebx,expl
 00000229  8B 4B 18		mov ecx,(SPRITE PTR [ebx]).Other
 0000022C  41			inc ecx
 0000022D  89 4B 18		mov (SPRITE PTR [ebx]).Other, ecx 
 00000230  83 F9 5A		cmp ecx,90
 00000233  75 0E		jne dun
 00000235  C7 43 08		mov (SPRITE PTR [ebx]).Visible,0
	   00000000
 0000023C  C7 43 18		mov (SPRITE PTR [ebx]).Other,0
	   00000000

 00000243			dun:
 00000243  8B 1D 00000000 E	mov ebx, Sprites
 00000249  8B CB		mov ecx,ebx
 0000024B  83 C1 20		add ecx,32
 0000024E  83 79 08 01		cmp (SPRITE PTR [ecx]).Visible,1
 00000252  74 11		je done
				INVOKE PlaySound, OFFSET gameover, 0, SND_ASYNC+SND_FILENAME
 00000265			done:
				ret
 00000269			GameLogic ENDP





 00000269			Collision PROC uses ebx ecx edx esi edi SpritePTR1:DWORD, SpritePTR2:DWORD
				;;(x2-x1)^2
 00000271  8B 5D 08		mov ebx, SpritePTR1
 00000274  8B 4D 0C		mov ecx, SpritePTR2
 00000277  83 79 08 00		cmp (SPRITE PTR [ecx]).Visible,0
 0000027B  74 2E		je setZero
 0000027D  83 7B 08 00		cmp (SPRITE PTR [ebx]).Visible,0
 00000281  74 28		je setZero
 00000283  8B 03		mov eax,(SPRITE PTR [ebx]).LocX
 00000285  2B 01		sub eax,(SPRITE PTR [ecx]).LocX
 00000287  F7 E8		imul eax
 00000289  8B F8		mov edi, eax
				;;(y2-y1)^2
 0000028B  8B 43 04		mov eax,(SPRITE PTR [ebx]).LocY
 0000028E  2B 41 04		sub eax,(SPRITE PTR [ecx]).LocY
 00000291  F7 E8		imul eax
 00000293  03 F8		add edi, eax
				;;edi<- (x2-x1)^2+(y2-y1)^2

 00000295  8B 43 1C		mov eax, (SPRITE PTR [ebx]).Radius
 00000298  03 41 1C		add eax, (SPRITE PTR [ecx]).Radius
 0000029B  F7 E8		imul eax
				;;eax<- (R1+R2)^2
 0000029D  2B C7		sub eax, edi
 0000029F  83 F8 00		cmp eax, 0 
 000002A2  7C 07		jl setZero
 000002A4  B8 00000001		mov eax, 1
 000002A9  EB 05		jmp processed


 000002AB			setZero:
 000002AB  B8 00000000		mov eax,0

 000002B0			processed:
				ret
 000002B9			Collision ENDP


				END
Microsoft (R) Macro Assembler Version 6.14.8444		    03/27/15 10:23:45
logic.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

SPRITE . . . . . . . . . . . . .	 00000020
  LocX . . . . . . . . . . . . .	 00000000	 DWord
  LocY . . . . . . . . . . . . .	 00000004	 DWord
  Visible  . . . . . . . . . . .	 00000008	 DWord
  BitmapPTR  . . . . . . . . . .	 0000000C	 DWord
  BMType . . . . . . . . . . . .	 00000010	 DWord
  Health . . . . . . . . . . . .	 00000014	 DWord
  Other  . . . . . . . . . . . .	 00000018	 DWord
  Radius . . . . . . . . . . . .	 0000001C	 DWord
_EECS205BITMAP . . . . . . . . .	 00000010
  dwWidth  . . . . . . . . . . .	 00000000	 DWord
  dwHeight . . . . . . . . . . .	 00000004	 DWord
  bTransparent . . . . . . . . .	 00000008	 Byte
  lpBytes  . . . . . . . . . . .	 0000000C	 DWord


Types:

                N a m e                  Size     Attr

EECS205BITMAP  . . . . . . . . .	 00000010     _EECS205BITMAP 


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000025 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002B9 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BasicBlit  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BeginDraw  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
BlitReg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Collision  . . . . . . . . . . .	P Near	 00000269 _TEXT	Length= 00000050 Public STDCALL
  SpritePTR1 . . . . . . . . . .	DWord	 bp + 00000008
  SpritePTR2 . . . . . . . . . .	DWord	 bp + 0000000C
  setZero  . . . . . . . . . . .	L Near	 000002AB _TEXT	
  processed  . . . . . . . . . .	L Near	 000002B0 _TEXT	
DrawAllStars . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawStarReg  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EndDraw  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameInit . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameLogic  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000269 Public STDCALL
  CurrentKey . . . . . . . . . .	DWord	 bp + 00000008
  game . . . . . . . . . . . . .	L Near	 00000011 _TEXT	
  SpriteLoop . . . . . . . . . .	L Near	 0000002B _TEXT	
  RightArrow . . . . . . . . . .	L Near	 00000031 _TEXT	
  LeftArrow  . . . . . . . . . .	L Near	 0000004C _TEXT	
  leftedge . . . . . . . . . . .	L Near	 00000067 _TEXT	
  rightedge  . . . . . . . . . .	L Near	 00000077 _TEXT	
  Asteroid . . . . . . . . . . .	L Near	 00000085 _TEXT	
  MoveRight  . . . . . . . . . .	L Near	 0000008B _TEXT	
  MoveLeft . . . . . . . . . . .	L Near	 00000098 _TEXT	
  SwitchRight  . . . . . . . . .	L Near	 000000A5 _TEXT	
  SwitchLeft . . . . . . . . . .	L Near	 000000BF _TEXT	
  Laser  . . . . . . . . . . . .	L Near	 000000D4 _TEXT	
  movementlogic  . . . . . . . .	L Near	 000000FE _TEXT	
  nextspt  . . . . . . . . . . .	L Near	 00000121 _TEXT	
  SpriteLoop2  . . . . . . . . .	L Near	 00000146 _TEXT	
  nextspt2 . . . . . . . . . . .	L Near	 000001A0 _TEXT	
  SpriteLoop3  . . . . . . . . .	L Near	 000001C6 _TEXT	
  nextspt3 . . . . . . . . . . .	L Near	 00000217 _TEXT	
  dun  . . . . . . . . . . . . .	L Near	 00000243 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000265 _TEXT	
GameMain . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GameRender . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySoundA . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RotateBlit . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
NumSprites . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
PlaySound  . . . . . . . . . . .	Text   	 PlaySoundA
SND_ASYNC  . . . . . . . . . . .	Number	 00000001h   
SND_FILENAME . . . . . . . . . .	Number	 00020000h   
SND_LOOP . . . . . . . . . . . .	Number	 00000008h   
Sprites  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
StarBitmap . . . . . . . . . . .	_EECS205BITMAP  00000000 FLAT	External STDCALL
VK_0 . . . . . . . . . . . . . .	Number	 00000030h   
VK_1 . . . . . . . . . . . . . .	Number	 00000031h   
VK_2 . . . . . . . . . . . . . .	Number	 00000032h   
VK_3 . . . . . . . . . . . . . .	Number	 00000033h   
VK_4 . . . . . . . . . . . . . .	Number	 00000034h   
VK_5 . . . . . . . . . . . . . .	Number	 00000035h   
VK_6 . . . . . . . . . . . . . .	Number	 00000036h   
VK_7 . . . . . . . . . . . . . .	Number	 00000037h   
VK_8 . . . . . . . . . . . . . .	Number	 00000038h   
VK_9 . . . . . . . . . . . . . .	Number	 00000039h   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_ATTN  . . . . . . . . . . . .	Number	 000000F6h   
VK_A . . . . . . . . . . . . . .	Number	 00000041h   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_B . . . . . . . . . . . . . .	Number	 00000042h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_CRSEL . . . . . . . . . . . .	Number	 000000F7h   
VK_C . . . . . . . . . . . . . .	Number	 00000043h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_D . . . . . . . . . . . . . .	Number	 00000044h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_EREOF . . . . . . . . . . . .	Number	 000000F9h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_EXSEL . . . . . . . . . . . .	Number	 000000F8h   
VK_E . . . . . . . . . . . . . .	Number	 00000045h   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_F . . . . . . . . . . . . . .	Number	 00000046h   
VK_G . . . . . . . . . . . . . .	Number	 00000047h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_H . . . . . . . . . . . . . .	Number	 00000048h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_I . . . . . . . . . . . . . .	Number	 00000049h   
VK_J . . . . . . . . . . . . . .	Number	 0000004Ah   
VK_K . . . . . . . . . . . . . .	Number	 0000004Bh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_L . . . . . . . . . . . . . .	Number	 0000004Ch   
VK_MBUTTON . . . . . . . . . . .	Number	 00000004h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_M . . . . . . . . . . . . . .	Number	 0000004Dh   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NONAME  . . . . . . . . . . .	Number	 000000FCh   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_N . . . . . . . . . . . . . .	Number	 0000004Eh   
VK_OEM_CLEAR . . . . . . . . . .	Number	 000000FEh   
VK_O . . . . . . . . . . . . . .	Number	 0000004Fh   
VK_PA1 . . . . . . . . . . . . .	Number	 000000FDh   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PGDN  . . . . . . . . . . . .	Number	 00000022h   
VK_PGUP  . . . . . . . . . . . .	Number	 00000021h   
VK_PLAY  . . . . . . . . . . . .	Number	 000000FAh   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_P . . . . . . . . . . . . . .	Number	 00000050h   
VK_Q . . . . . . . . . . . . . .	Number	 00000051h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_R . . . . . . . . . . . . . .	Number	 00000052h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SELECT  . . . . . . . . . . .	Number	 00000029h   
VK_SEPARATOR . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_S . . . . . . . . . . . . . .	Number	 00000053h   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_T . . . . . . . . . . . . . .	Number	 00000054h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
VK_U . . . . . . . . . . . . . .	Number	 00000055h   
VK_V . . . . . . . . . . . . . .	Number	 00000056h   
VK_W . . . . . . . . . . . . . .	Number	 00000057h   
VK_X . . . . . . . . . . . . . .	Number	 00000058h   
VK_Y . . . . . . . . . . . . . .	Number	 00000059h   
VK_ZOOM  . . . . . . . . . . . .	Number	 000000FBh   
VK_Z . . . . . . . . . . . . . .	Number	 0000005Ah   
WinMain  . . . . . . . . . . . .	L Near	 00000000 FLAT	External STDCALL
dwPitch  . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
explosion  . . . . . . . . . . .	Byte	 0000000A _DATA	
expl . . . . . . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
gameover . . . . . . . . . . . .	Byte	 00000018 _DATA	
lpDisplayBits  . . . . . . . . .	DWord	 00000000 FLAT	External STDCALL
shoot  . . . . . . . . . . . . .	Byte	 00000000 _DATA	

	   0 Warnings
	   0 Errors
